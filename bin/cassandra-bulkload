#!/usr/bin/env ruby

require 'rubygems'
require 'wukong'
require 'configliere' ; Configliere.use(:commandline, :env_var, :define)
require 'erubis'
require 'tempfile'

Settings.define :ks,               :default => "Keyspace1",                          :description => "Cassandra Keyspace to write data to"
Settings.define :cf,               :default => "Standard1",                          :description => "Cassandra Column Family to write to"
Settings.define :min_split_size,   :default => "100000",                             :description => "Hadoop min split size"
Settings.define :key_field,        :default => "0",                                  :description => "Starting from 0, which field to use as the row key"
Settings.define :sub_key_field,                                                      :description => "Indicates the row key when inserting into supercolumns, leave blank otherwise"
Settings.define :ts_field,                                                           :description => "What field, if any, should be used as the timestamp"
Settings.define :cassandra_config, :default => "/etc/cassandra/cassandra.yaml",      :description => "Full path to cassandra.yaml properties file"
Settings.define :hadoop_home,      :default => "/usr/lib/hadoop",                    :env_var => "HADOOP_HOME",    :description => "Path to hadoop installation"
Settings.define :cassandra_home,   :default => "/usr/local/share/cassandra",         :env_var => "CASSANDRA_HOME", :description => "Path to cassandra installation"
Settings.define :field_names,      :default => "rsrc,tweet_id,created_at,user_id,screen_name,search_id,in_reply_to_user_id,in_reply_to_screen_name,in_reply_to_search_id,in_reply_to_status_id,text,source,lang,lat,lng,retweeted_count,rt_of_user_id,rt_of_screen_name,rt_of_tweet_id,contributors"
Settings.define :nil_outfile,      :default => "/tmp/cassandra_bulkloader/nil.out", :description => "We need an output path even if we dont write anything to it"
Settings.resolve!

raise "No input file specified." if Settings.rest.first.blank?

class CassandraBulkLoader
  attr_accessor :options

  def initialize
    @options = Settings.dup
  end

  def execute
    remove_nil_outfile
    hadoop_cmd = [
      "HADOOP_CLASSPATH=#{hadoop_classpath}",
      "#{options.hadoop_home}/bin/hadoop jar #{run_jar}",
      "CassandraBulkLoader",
      "-Dcassandra.config=file://#{options.cassandra_config}",
      "-Dcassandra.keyspace=#{options.ks}",
      "-Dcassandra.column_family=#{options.cf}",
      "-Dcassandra.row_key_field=#{options.key_field}",
      "-Dcassandra.field_names=#{options.field_names}",
      timestamp,
      sub_key_field,
      "-Dmapred.min.split.size=#{options.min_split_size}",
      "-libjars #{libjars}",
      "#{options.rest.first}",
      "#{options.nil_outfile}"
    ].flatten.compact.join(" \t\\\n  ")
    system %Q{ echo #{hadoop_cmd} }
    system %Q{ #{hadoop_cmd} }
  end

  def remove_nil_outfile
    system %Q{ hdp-rm -r #{options.nil_outfile} }
  end

  def hadoop_classpath
    hdp_cp = []
    Dir[
      "#{options.cassandra_home}/lib/*cassandra*.jar"
    ].each{|jar| hdp_cp << jar}
    hdp_cp.join(':')
  end

  def run_jar
    File.dirname(File.expand_path(__FILE__))+'/../build/cassandra_bulk_loader.jar'
  end

  def libjars
    libjars = []
    Dir[
      "#{options.cassandra_home}/lib/*.jar"
    ].each{|jar| libjars << jar}
    libjars.join(',')
  end

  def timestamp
    return unless options.ts_field
    "-Dcassandra.timestamp_field=#{options.ts_field}"
  end

  def sub_key_field
    return unless options.sub_key_field
    "-Dcassandra.sub_key_field=#{options.sub_key_field}"
  end

end

runner = CassandraBulkLoader.new
runner.execute
