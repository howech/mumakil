#!/usr/bin/env ruby

require 'rubygems'
require 'wukong'
require 'configliere' ; Configliere.use(:commandline, :env_var, :define)
require 'erubis'
require 'tempfile'

Settings.define :ks,              :default => "Keyspace1",                          :description => "Cassandra Keyspace to write data to"
Settings.define :cf,              :default => "Standard1",                          :description => "Cassandra Column Family to write to"
Settings.define :hadoop_out_file, :default => "/tmp/cassandra_bulk_loader/foo.out", :description => "Full hdfs path to where hadoop output file should go. Nothing important is written here, more like a receipt"
Settings.define :node_map_tasks,  :default => "6",                                  :description => "The number of map tasks hadoop cluster is configured to run per node, this many cassandra.yaml files will be created ..."
Settings.define :min_split_size,  :default => "100000",                             :description => "Hadoop min split size"
Settings.define :key_field,       :default => "0",                                   :description => "Starting from 0, which field to use as the row key"
Settings.define :ts_field,                                                          :description => "What field, if any, should be used as the timestamp"
Settings.define :hadoop_home,     :default => "/usr/lib/hadoop",                    :env_var => "HADOOP_HOME",    :description => "Path to hadoop installation"
Settings.define :cassandra_home,  :default => "/usr/local/share/cassandra",         :env_var => "CASSANDRA_HOME", :description => "Path to cassandra installation"
Settings.define :field_names,     :default => "tweet_id,created_at,user_id,screen_name,search_id,in_reply_to_user_id,in_reply_to_screen_name,in_reply_to_search_id,in_reply_to_status_id,text,source,lang,lat,lng,retweeted_count,rt_of_user_id,rt_of_screen_name,rt_of_tweet_id,contributors"

Settings.resolve!

class CassandraBulkLoader
  attr_accessor :options, :cassandra_config_options, :hadoop_cmd, :cassandra_configs

  def initialize
    @cassandra_configs = []
    @options = Settings.dup
  end

  def here
    File.expand_path(__FILE__)
  end

  #
  # Actually run the hadoop job based on passed in options and the cassandra
  # yaml template file.
  #
  def execute
    uniquify_config
    @hadoop_cmd = [
      "HADOOP_CLASSPATH=#{hadoop_classpath}",
      "#{@options.hadoop_home}/bin/hadoop jar #{run_jar}",
      "CassandraBulkLoader",
      "-Dcassandra.config=#{@cassandra_configs.join(',')}",
      "-Dcassandra.keyspace=#{@options.ks}",
      "-Dcassandra.column_family=#{@options.cf}",
      "-Dcassandra.row_key_field=#{@options.key_field}",
      "-Dcassandra.field_names=#{@options.field_names}",
      timestamp,
      "-Dmapred.min.split.size=#{@options.min_split_size}",
      "-libjars #{libjars}",
      "#{@options.rest.first}",
      "#{@options.hadoop_out_file}"
    ].flatten.compact.join(" \t\\\n  ")
    system %Q{ echo #{@hadoop_cmd} }
    system %Q{ #{@hadoop_cmd} }
  end

  def hadoop_classpath
    hdp_cp = []
    Dir[
      "#{@options.cassandra_home}/lib/*cassandra*.jar"
    ].each{|jar| hdp_cp << jar}
    hdp_cp.join(':')
  end

  def run_jar
    File.dirname(here)+'/../build/cassandra_bulk_loader.jar'
  end

  def libjars
    libjars = []
    Dir[
      "#{@options.cassandra_home}/lib/*.jar"
    ].each{|jar| libjars << jar}
    libjars.join(',')
  end

  def create_cassandra_config cassandra_config_options, num
    File.open("/tmp/cassandra_#{num}.yaml", "wb") do |dest|
      dest << Erubis::Eruby.new(source).result(cassandra_config_options)
      dest << "\n"
    end
    "file:///tmp/cassandra_#{num}.yaml"
  end

  def source
    File.open(File.dirname(here)+'/cassandra.yaml.erb').read
  end

  #
  # This is the only way I can figure out how to run multiple storage clients
  # on a single machine, and it doesn't even work at the moment
  #
  def uniquify_config
    cassandra_config_options = {}
    @options.node_map_tasks.to_i.times do |i|
      storage_port = 7000 + i
      rpc_port     = 9160 + i
      rpc_address  = "127.0.0.#{i+1}"
      cassandra_config_options[:storage_port] = storage_port
      cassandra_config_options[:rpc_port]     = rpc_port
      cassandra_config_options[:rpc_address]  = rpc_address
      @cassandra_configs << create_cassandra_config(cassandra_config_options, i)
    end
  end

  def timestamp
    return unless @options.ts_field
    "-Dcassandra.timestamp_field=#{@options.ts_field}"
  end

end

runner = CassandraBulkLoader.new
runner.execute
